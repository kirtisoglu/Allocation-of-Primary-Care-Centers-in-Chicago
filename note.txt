


-----------------  MAIN STREAM   -----------------

optimization ->

chain.py  -> Markov chain is defined here. For each state, Recom class is called from proposals.tree_proposals module.

proposals -> Recomb class in tree_proposals file is the method to be used for the intermadiate steps of the chain. 
             It calls capacitated_recursive tree from tree.py and Partition class form partition file in the partition folder.

partition -> There are 4 files here but it is enough to mention two of them for the main stream.
                
                partition:
                assignment:

tree.py  -> We need to understand three functions here:

                capacitated_hierarchical_tree:
                bipartition_tree:
                find_edge_cuts:


updaters -> We use only two files here:

                cut_edges:
                flows:

Order: SingleMetricOptimizers by user -> MarkovChain by tilted_run function in SingleMetricOptimizers 
        -> recomb function at every state by MarkovChain. Remark: parameters of recomb is defined by user, not in MarkovChain. -> capacitated_recursive_tree by recomb
        -> bipartition_tree -> find_edge_cuts -> find_edge_cuts ->

-----------------  OTHERS   -----------------

graph

metrics

meta

vendor

constraints

metagraph.py




---------------------------------------------------------------- GRAPH ----------------------------------------------------------------





Real Graph

    1.



Transportatiom network - input: street data,census blocks, hospitals, otherlocations?, GTFS?

    0.  Advance plotting functions!

    1. Clean openstreetmap data.
    
        Read OSM data with custom filter. Get rid of unnecessary columns. 

    2. Create the graph.
    
    2. Filtering data based on bounding box

        We need a bounding box to extract a subdata extract only a subset of the whole OSM PBF file covering e.g. a specific region. 
        The bounding box should contain all transportation network in the city and be a bit larger than the city area for a precise
        travel time calculation. Because there might be a shorter travel route in time exceeding the city boundaries since transportation
        network most likely exceeds the city boundaries.
        
        We handle this using Pyrosm library, which provides an easy way to filter larger PBF files using a rectangular shape or a more 
        complex geometric feature, e.g. a Polygon. Pyrosm requries a list of coordinates



---------------------------------------------------------------- TRAVEL TIME ----------------------------------------------------------------

1. 




---------------------------------------------------------------- GERRYCHAIN NOTES ----------------------------------------------------------------



Maup operation. Do we need to fix holes? Is Gerrychain doing that during the graph construction? Check if there is a projection issue. 

gerrychain assign areas using UTM (df.geometry.area) according to long and lat. 

Assign the same colors for the same districts in two sided plot. Check other plotting functions, find an appropriate way. Hareketli cizelim mi?

Graph shouldn't contain geometry attribute. Define it in its class and call when necessary.  ??

Idea 1: Define facility_travel_radius and district_travel_diameter for each district. 

- candidate_travel_eccentiricity = max(travel(candidate, blocks) for block in district).  Save (candidate, candidate_radius) pairs. (defined as candidate_radius in the existing code)

- central_candidate = candidate with the minimum candidate_travel_eccentiricity. Deined as best_candidate in the code.

- facility_travel_radius: travel_eccentiricity of the central_candidate. 

- district_travel_diamater = max(tavel(block_x, block_y) for block_x, block_y in district)

central_candidate and facility_travel_radius is defined for just picking the facility of the district.

district_travel_diameter is defined for compactness. Use this in the objective function.

Idea 2: Use area & population density to pick the edges of cut edge set. Hierarchical facility location.

Idea 3: Integrate a flip operation.

Idea 5: Initial partition saving, result saving.

Idea 6: Put a treshold for max travel time: eliminate cut edges accordingly. 

Idea 7: Consider existing centers. 

Idea 8: If the population of a block is zero, can you leave it out of the resdistricting without making the dual graph disconnected ?

Idea 9: You can define a bias for number of teams according to density? 

Idea 10: Remove blocks with population 0. Check out its continuity.

Note: Test Wilson's algorithm for the initial solution.



---------------------------------------------------------------- LOCAL SEARCH ----------------------------------------------------------------

1. There are two ipynb files for that.



---------------------------------------------------------------- MARKOV CHAIN ----------------------------------------------------------------





---------------------------------------------------------------- TESTING REPO ----------------------------------------------------------------